version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: api_gateway_postgres_prod
    environment:
      POSTGRES_DB: api_gateway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api_gateway_network_prod
    restart: unless-stopped
    secrets:
      - postgres_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database
  kong-database:
    image: postgres:15-alpine
    container_name: kong_postgres_prod
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD_FILE: /run/secrets/kong_db_password
    volumes:
      - kong_data_prod:/var/lib/postgresql/data
    networks:
      - api_gateway_network_prod
    restart: unless-stopped
    secrets:
      - kong_db_password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kong Database Migration
  kong-migration:
    image: kong:3.9.0
    container_name: kong_migration_prod
    command: "kong migrations bootstrap"
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_db_password
    networks:
      - api_gateway_network_prod
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure
    secrets:
      - kong_db_password

  # Kong Gateway
  kong:
    image: kong:3.9.0
    container_name: kong_gateway_prod
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD_FILE: /run/secrets/kong_db_password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"  # Kong Proxy
      - "8443:8443"  # Kong Proxy SSL
      - "8001:8001"  # Kong Admin API
      - "8444:8444"  # Kong Admin API SSL
      - "8002:8002"  # Kong Manager
    networks:
      - api_gateway_network_prod
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    restart: unless-stopped
    secrets:
      - kong_db_password
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: api_gateway_redis_prod
    ports:
      - "6379:6379"
    networks:
      - api_gateway_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_gateway_backend_prod
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: api_gateway
      DATABASE_USER: postgres
      DATABASE_PASSWORD_FILE: /run/secrets/postgres_password
      REDIS_URL: redis://redis:6379
      SECRET_KEY_FILE: /run/secrets/jwt_secret_key
    ports:
      - "8000:8000"
    networks:
      - api_gateway_network_prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    secrets:
      - postgres_password
      - jwt_secret_key
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Rust)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway_rust_prod
    environment:
      GATEWAY_CONFIG_FILE: /app/config/gateway-config.json
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: api_gateway
      DATABASE_USER: postgres
      DATABASE_PASSWORD_FILE: /run/secrets/postgres_password
      JWT_SECRET_FILE: /run/secrets/jwt_secret_key
      REDIS_URL: redis://redis:6379
    ports:
      - "8080:8080"
    networks:
      - api_gateway_network_prod
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    secrets:
      - postgres_password
      - jwt_secret_key
    volumes:
      - ./api-gateway/config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: api_gateway_frontend_prod
    environment:
      VITE_API_BASE_URL: http://localhost:8080
      VITE_KEYCLOAK_URL: http://localhost:8180
    ports:
      - "3000:80"
    networks:
      - api_gateway_network_prod
    depends_on:
      api-gateway:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data_prod:
    driver: local
  kong_data_prod:
    driver: local

networks:
  api_gateway_network_prod:
    driver: bridge

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  kong_db_password:
    file: ./secrets/kong_db_password.txt
  jwt_secret_key:
    file: ./secrets/jwt_secret_key.txt 