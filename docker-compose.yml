version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: api_gateway_postgres
    environment:
      POSTGRES_DB: api_gateway
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - api_gateway_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin_dev}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/api_gateway
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HTTP_ENABLED: "true"
      KC_HOSTNAME_STRICT_HTTPS: "false"
    ports:
      - "8180:8080"
    command: start-dev
    networks:
      - api_gateway_network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: api_gateway_redis
    ports:
      - "6379:6379"
    networks:
      - api_gateway_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: api_gateway_backend
    environment:
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: api_gateway
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-postgres_dev}
      REDIS_URL: redis://redis:6379
      SECRET_KEY: ${JWT_SECRET_KEY:-your-dev-secret-key}
    ports:
      - "8000:8000"
    networks:
      - api_gateway_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway (Rust) - Primary Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api_gateway_rust
    environment:
      GATEWAY_CONFIG: |
        {
          "server": {
            "host": "0.0.0.0",
            "port": 8080
          },
          "routes": [
            {
              "path": "/api/v1/*",
              "method": null,
              "backend": "backend_api",
              "load_balancing": "round_robin",
              "rate_limit": 100,
              "auth_required": true,
              "timeout_ms": 30000
            },
            {
              "path": "/auth/*",
              "method": null,
              "backend": "backend_api",
              "load_balancing": "round_robin",
              "rate_limit": 200,
              "auth_required": false,
              "timeout_ms": 30000
            },
            {
              "path": "/health",
              "method": "GET",
              "backend": "backend_api",
              "load_balancing": "round_robin",
              "rate_limit": 1000,
              "auth_required": false,
              "timeout_ms": 5000
            }
          ],
          "backends": {
            "backend_api": {
              "name": "Backend API",
              "servers": ["http://backend:8000"],
              "health_check": {
                "enabled": true,
                "path": "/health",
                "interval_seconds": 30,
                "timeout_seconds": 5,
                "healthy_threshold": 2,
                "unhealthy_threshold": 3
              },
              "circuit_breaker": {
                "enabled": true,
                "failure_threshold": 5,
                "recovery_timeout_seconds": 60
              }
            }
          },
          "rate_limiting": {
            "enabled": true,
            "default_requests_per_minute": 60,
            "burst_size": 10,
            "storage": "redis"
          },
          "auth": {
            "enabled": true,
            "jwt_secret": "your-jwt-secret-key",
            "api_key_header": "X-API-Key",
            "bypass_paths": ["/health", "/metrics", "/auth/login", "/auth/register", "/public/*"]
          },
          "redis": {
            "url": "redis://redis:6379",
            "pool_size": 10
          },
          "database": {
            "url": "postgresql://postgres:postgres_dev@postgres:5432/api_gateway",
            "max_connections": 10
          }
        }
    ports:
      - "8080:8080"  # Primary Gateway Port
    networks:
      - api_gateway_network
    depends_on:
      backend:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: api_gateway_frontend
    ports:
      - "3000:80"
    networks:
      - api_gateway_network
    depends_on:
      - api-gateway
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  api_gateway_network:
    driver: bridge 